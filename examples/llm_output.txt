<<FILE:requirements.txt>>
fastapi==0.104.1
uvicorn==0.24.0
pydantic==2.5.2
<<END>>

<<FILE:config.py>>
from pathlib import Path

BASE_DIR = Path(__file__).parent
DATABASE_PATH = BASE_DIR / "tasks.json"
<<END>>

<<FILE:app/models.py>>
from pydantic import BaseModel
from typing import Optional
from datetime import datetime

class Task(BaseModel):
    id: Optional[int] = None
    title: str
    description: str
    due_date: datetime
    completed: bool = False
<<END>>

<<FILE:app/storage.py>>
import json
from typing import List
from app.models import Task
from config import DATABASE_PATH

class TaskStorage:
    def __init__(self):
        self.tasks: List[Task] = []
        self._load_tasks()
    
    def _load_tasks(self):
        try:
            with open(DATABASE_PATH, 'r') as f:
                data = json.load(f)
                self.tasks = [Task(**task) for task in data]
        except FileNotFoundError:
            self.tasks = []
    
    def save_task(self, task: Task) -> Task:
        task.id = len(self.tasks) + 1
        self.tasks.append(task)
        self._save_to_file()
        return task
    
    def _save_to_file(self):
        with open(DATABASE_PATH, 'w') as f:
            json.dump([task.dict() for task in self.tasks], f)
<<END>>

<<FILE:app/api.py>>
from fastapi import FastAPI, HTTPException
from app.models import Task
from app.storage import TaskStorage

app = FastAPI(title="Task Manager")
storage = TaskStorage()

@app.post("/tasks/", response_model=Task)
async def create_task(task: Task):
    return storage.save_task(task)

@app.get("/tasks/", response_model=list[Task])
async def list_tasks():
    return storage.tasks
<<END>>

<<FILE:main.py>>
import uvicorn
from app.api import app

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
<<END>>
